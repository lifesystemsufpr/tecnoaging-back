name: Deploy na VM

on:
  push:
    branches:
      - main   # troque para main se for o seu padrÃ£o

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Se vocÃª usa Environments (ex.: production), descomente:
    # environment: production
    env:
      SSH_HOST: ${{ secrets.SSH_HOST || vars.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER || vars.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT || vars.SSH_PORT }}
      APP_DIR:  tecnoaging-back        # diretÃ³rio de destino na VM
      PM2_APP:  tecnoaging-back             # nome do app no PM2

    steps:
      - name: ðŸš€ Checkout do cÃ³digo
        uses: actions/checkout@v4

      - name: ðŸ”‘ Carregar chave no ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: âœ… Validar segredos/variÃ¡veis
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -e
          for v in SSH_PRIVATE_KEY SSH_HOST SSH_USER APP_DIR; do
            if [ -z "${!v}" ]; then
              echo "::error title=Missing::$v estÃ¡ vazio."; exit 1
            fi
          done
          [ -z "${SSH_PORT}" ] && echo "SSH_PORT nÃ£o definido, usando 22"

      - name: ðŸ“’ Adicionar host ao known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${SSH_PORT:-22}" -H "${SSH_HOST}" >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: ðŸ“‚ Enviar cÃ³digo para a VM (~/tecnoaging-back)
        run: |
          # Garante que o diretÃ³rio existe
          ssh -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" "mkdir -p ~/${APP_DIR}"
          # Sincroniza (ajuste exclusÃµes conforme seu projeto)
          rsync -avz --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude 'dist' \
            -e "ssh -p ${SSH_PORT:-22}" ./ \
            "${SSH_USER}@${SSH_HOST}:~/${APP_DIR}/"

      - name: ðŸš€ Instalar deps, build e reiniciar (PM2)
        run: |
          # Injeta APP_DIR e PM2_APP no ambiente remoto; evita TTY interativo e bloqueios
          ssh -p "${SSH_PORT:-22}" \
            -o StrictHostKeyChecking=no \
            -o BatchMode=yes \
            -o LogLevel=ERROR \
            -o ServerAliveInterval=30 -o ServerAliveCountMax=6 \
            "${SSH_USER}@${SSH_HOST}" "APP_DIR='${APP_DIR}' PM2_APP='${PM2_APP}' bash -se" << 'EOF'
            set -euo pipefail

            # Se usar nvm, tenta pÃ´r a versÃ£o mais recente no PATH (ignora se nÃ£o existir)
            if [ -d "$HOME/.nvm" ]; then
              export NVM_DIR="$HOME/.nvm"
              # shellcheck disable=SC1090
              [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
              command -v node >/dev/null 2>&1 || nvm use --lts || true
            fi

            cd ~/"${APP_DIR}"

            echo "ðŸ“¦ npm ci (ou install)"
            if command -v npm >/dev/null 2>&1; then
              npm ci || npm install
            else
              echo "npm nÃ£o encontrado"; exit 1
            fi

            echo "ðŸ”¨ build (se existir)"
            if npm run | grep -qE '\bbuild\b'; then
              npm run build
            else
              echo "Sem script build; seguindo."
            fi

            echo "ðŸš¦ PM2"
            if ! command -v pm2 >/dev/null 2>&1; then
              npm install -g pm2
            fi

            # Se existir ecosystem, use-o; senÃ£o, suba dist/main.js
            if [ -f ecosystem.config.js ]; then
              pm2 startOrReload ecosystem.config.js || pm2 start ecosystem.config.js
            else
              if pm2 describe "${PM2_APP}" >/dev/null 2>&1; then
                pm2 restart "${PM2_APP}"
              else
                pm2 start dist/main.js --name "${PM2_APP}"
              fi
            fi

            pm2 save || true

            # Reinicia nginx se possÃ­vel, mas nunca bloqueia o job
            sudo -n systemctl restart nginx 2>/dev/null || echo "nginx nÃ£o reiniciado (sem sudo NOPASSWD?)"

            pm2 ls || true
            exit 0
          EOF
