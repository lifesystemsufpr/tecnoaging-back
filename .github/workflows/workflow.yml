name: Deploy na VM (Azure)

"on":
  push:
    branches: [ main, master ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  # Ajuste estes nomes conforme seu projeto
  APP_DIR: tecnoaging-back
  PM2_APP: tecnoaging
  NODE_ENV: production
  # Porta SSH com fallback
  SSH_PORT: ${{ vars.SSH_PORT || '22' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Carregar chave SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Validar secrets/variáveis
        run: |
          set -euo pipefail
          req=(SSH_HOST SSH_USER DATABASE_URL JWT_SECRET)
          for k in "${req[@]}"; do
            v="${!k:-}"
            if [ -z "$v" ]; then
              echo "::error::Secret/variável '$k' ausente"
              exit 1
            fi
          done

      - name: Adicionar host à known_hosts
        run: |
          set -euo pipefail
          ssh-keyscan -p "${{ env.SSH_PORT }}" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Criar pasta do app no servidor
        run: |
          set -euo pipefail
          ssh -p "${{ env.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "mkdir -p \"$HOME/${{ env.APP_DIR }}\""

      - name: Rsync do código para o servidor
        run: |
          set -euo pipefail
          rsync -az --delete \
            --exclude '.git' --exclude 'node_modules' --exclude 'dist' \
            ./ "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$HOME/${{ env.APP_DIR }}/" \
            -e "ssh -p ${{ env.SSH_PORT }}"

      - name: Gerar .env no servidor
        run: |
          set -euo pipefail
          ssh -p "${{ env.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "bash -s" << 'EOF'
          set -euo pipefail
          APP_DIR="$HOME/${{ env.APP_DIR }}"
          cat > "$APP_DIR/.env" <<EENV
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          NODE_ENV=${{ env.NODE_ENV }}
          EENV
          chmod 600 "$APP_DIR/.env"
          EOF

      - name: Build e (re)start com PM2 (idempotente)
        env:
          APP_DIR_PATH: ${{ env.APP_DIR }}
          PM2_APP_NAME: ${{ env.PM2_APP }}
        run: |
          set -euo pipefail
          ssh -p "${{ env.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" "bash -lc '
            set -Eeuo pipefail

            APP_DIR=\"$HOME/${APP_DIR_PATH}\"
            cd \"$APP_DIR\"

            # Habilitar Node via nvm se existir (shell não-interativo não carrega .bashrc)
            if [ -s \"$HOME/.nvm/nvm.sh\" ]; then
              . \"$HOME/.nvm/nvm.sh\"
              nvm install --lts >/dev/null
              nvm use --lts >/dev/null
            fi

            # Garantir PM2
            if ! command -v pm2 >/dev/null 2>&1; then
              npm i -g pm2
            fi

            # Instalar deps e buildar
            npm ci
            npm run build

            # Start/reload
            if pm2 describe \"${PM2_APP_NAME}\" >/dev/null 2>&1; then
              pm2 reload \"${PM2_APP_NAME}\"
            else
              pm2 start dist/main.js --name \"${PM2_APP_NAME}\"
            fi

            pm2 save
          '"

      # (Opcional) Health check
      # - name: Health check
      #   run: curl -fS https://SEU_HOST/health || (echo "::error::Healthcheck falhou" && exit 1)

